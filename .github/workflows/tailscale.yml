name: Deploy Windows Server with Tailscale

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: windows-latest
    
    steps:
    - name: Enable RDP and configure
      run: |
        # Enable Remote Desktop
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force
        
        # Remove existing rule if any
        netsh advfirewall firewall delete rule name="RDP-Tailscale" 2>$null
        # Add firewall rule for RDP
        netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389
        
        # Restart RDP service
        Restart-Service -Name "TermService" -Force

    - name: Create RDP User with Secure Password
      run: |
        Add-Type -AssemblyName System.Web
        
        $Chars = @{
            Upper = [char[]](65..90)    # A-Z
            Lower = [char[]](97..122)   # a-z
            Number = [char[]](48..57)   # 0-9
            Special = [char[]](33..47) + [char[]](58..64) + [char[]](91..96) + [char[]](123..126)
        }
        
        $tempPassword = @()
        $tempPassword += $Chars.Upper | Get-Random -Count 2
        $tempPassword += $Chars.Lower | Get-Random -Count 2
        $tempPassword += $Chars.Number | Get-Random -Count 2
        $tempPassword += $Chars.Special | Get-Random -Count 2
        
        $password = -join ($tempPassword | Sort-Object { Get-Random })
        $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
        
        # Create user
        New-LocalUser -Name "RDPUser" -Password $securePassword -Description "RDP Access User"
        
        # Add to groups
        Add-LocalGroupMember -Group "Administrators" -Member "RDPUser"
        Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDPUser"
        
        # Store credentials
        echo "RDP_CREDS=User: RDPUser | Password: $password" >> $env:GITHUB_ENV
        
        # Verify user creation
        if (-not (Get-LocalUser -Name "RDPUser" -ErrorAction SilentlyContinue)) {
            Write-Error "User creation failed"
            exit 1
        }

    - name: Install Tailscale
      run: |
        # الروابط الصحيحة - تم التصحيح
        $tsurl = "https://pkgs.tailscale.com/stable/tailscale-setup-amd64.exe"
        $tsInstallerPath = "$env:TEMP\tailscale.exe"
        
        Write-Host "Downloading Tailscale from: $tsurl"
        
        # تحميل Tailscale
        try {
            Invoke-WebRequest -Uri $tsurl -OutFile $tsInstallerPath -UserAgent "GitHub-Actions"
        }
        catch {
            Write-Error "Download failed: $($_.Exception.Message)"
            exit 1
        }
        
        # التحقق من التحميل
        if (-not (Test-Path $tsInstallerPath)) {
            Write-Error "Download failed - file not found"
            exit 1
        }
        
        Write-Host "Download successful! File size: $((Get-Item $tsInstallerPath).Length) bytes"
        
        # التثبيت
        Write-Host "Installing Tailscale..."
        Start-Process -FilePath $tsInstallerPath -ArgumentList "/S" -Wait -NoNewWindow
        
        # الانتظار للتثبيت
        Start-Sleep -Seconds 30
        Write-Host "Tailscale installation completed"

    - name: Verify Tailscale Installation
      run: |
        Write-Host "Verifying Tailscale installation..."
        Start-Sleep -Seconds 10
        
        # التحقق من التثبيت بعدة طرق
        $service = Get-Service -Name "Tailscale" -ErrorAction SilentlyContinue
        $process = Get-Process -Name "tailscale*" -ErrorAction SilentlyContinue
        
        # البحث عن الملف في المسارات المحتملة
        $possiblePaths = @(
            "C:\Program Files\Tailscale\tailscale.exe",
            "C:\Program Files (x86)\Tailscale\tailscale.exe",
            "$env:PROGRAMFILES\Tailscale\tailscale.exe",
            "$env:PROGRAMFILES(X86)\Tailscale\tailscale.exe"
        )
        
        $exePath = $null
        foreach ($path in $possiblePaths) {
            if (Test-Path $path) {
                $exePath = $path
                break
            }
        }
        
        if ($service -or $process -or $exePath) {
            Write-Host "✓ Tailscale installed successfully"
            if ($service) { Write-Host "  Service: $($service.Name) - Status: $($service.Status)" }
            if ($process) { Write-Host "  Process: $($process.Name)" }
            if ($exePath) { Write-Host "  Executable: $exePath" }
            
            # إضافة المسار إلى environment variable للاستخدام لاحقاً
            if ($exePath) {
                echo "TAILSCALE_PATH=$exePath" >> $env:GITHUB_ENV
            }
        } else {
            Write-Error "✗ Tailscale not found after installation"
            Write-Host "Searching in all program files..."
            Get-ChildItem "C:\Program Files*\Tailscale*" -Recurse -ErrorAction SilentlyContinue | ForEach-Object { Write-Host "Found: $($_.FullName)" }
            exit 1
        }

    - name: Start Tailscale and Get IP
      run: |
        Write-Host "Starting Tailscale connection..."
        
        # تحديد مسار tailscale
        if (-not $env:TAILSCALE_PATH) {
            $tailscaleExe = "C:\Program Files\Tailscale\tailscale.exe"
        } else {
            $tailscaleExe = $env:TAILSCALE_PATH
        }
        
        if (-not (Test-Path $tailscaleExe)) {
            Write-Error "Tailscale executable not found at: $tailscaleExe"
            exit 1
        }
        
        Write-Host "Using Tailscale from: $tailscaleExe"
        
        # تشغيل الخدمة
        try {
            Start-Service -Name "Tailscale" -ErrorAction Stop
            Write-Host "✓ Tailscale service started"
        }
        catch {
            Write-Host "⚠ Service start failed, trying direct execution..."
        }
        
        Start-Sleep -Seconds 10
        
        # المصادقة
        Write-Host "Authenticating with Tailscale..."
        & "$tailscaleExe" up --auth-key=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=windows-server-${{ github.run_id }}
        
        # الحصول على IP
        Write-Host "Getting Tailscale IP..."
        Start-Sleep -Seconds 10
        
        $tailscaleIP = & "$tailscaleExe" ip --4
        if (-not $tailscaleIP) {
            Write-Host "Trying alternative method to get IP..."
            $status = & "$tailscaleExe" status --json
            $json = $status | ConvertFrom-Json
            $tailscaleIP = $json.Self.TailscaleIPs[0]
        }
        
        if ($tailscaleIP) {
            echo "TAILSCALE_IP=$tailscaleIP" >> $env:GITHUB_ENV
            Write-Host "✓ Tailscale IP: $tailscaleIP"
        } else {
            Write-Error "✗ Could not get Tailscale IP"
            Write-Host "Current status:"
            & "$tailscaleExe" status
            exit 1
        }
        
        # عرض النتائج النهائية
        Write-Host "=== DEPLOYMENT COMPLETE ==="
        Write-Host "RDP Credentials: $env:RDP_CREDS"
        Write-Host "Tailscale IP: $tailscaleIP"
        Write-Host "Connect using: mstsc /v:$tailscaleIP"

    - name: Show Connection Info
      run: |
        Write-Host ""
        Write-Host "=== CONNECTION INFORMATION ==="
        Write-Host "RDP Username: RDPUser" 
        Write-Host "RDP Password: (check RDP_CREDS in environment)"
        Write-Host "Tailscale IP: $env:TAILSCALE_IP"
        Write-Host "Connect using: mstsc /v:$env:TAILSCALE_IP"
        Write-Host ""
