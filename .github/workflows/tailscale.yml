name: Deploy Windows Server with Tailscale

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: windows-latest
    
    steps:
    - name: Enable RDP and configure
      run: |
        # Enable Remote Desktop
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force
        
        # Remove existing rule if any
        netsh advfirewall firewall delete rule name="RDP-Tailscale" 2>$null
        # Add firewall rule for RDP
        netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389
        
        # Restart RDP service
        Restart-Service -Name "TermService" -Force

    - name: Create RDP User with Secure Password
      run: |
        Add-Type -AssemblyName System.Web
        
        $Chars = @{
            Upper = [char[]](65..90)    # A-Z
            Lower = [char[]](97..122)   # a-z
            Number = [char[]](48..57)   # 0-9
            Special = [char[]](33..47) + [char[]](58..64) + [char[]](91..96) + [char[]](123..126)
        }
        
        $tempPassword = @()
        $tempPassword += $Chars.Upper | Get-Random -Count 2
        $tempPassword += $Chars.Lower | Get-Random -Count 2
        $tempPassword += $Chars.Number | Get-Random -Count 2
        $tempPassword += $Chars.Special | Get-Random -Count 2
        
        $password = -join ($tempPassword | Sort-Object { Get-Random })
        $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
        
        # Create user
        New-LocalUser -Name "RDPUser" -Password $securePassword -Description "RDP Access User"
        
        # Add to groups
        Add-LocalGroupMember -Group "Administrators" -Member "RDPUser"
        Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDPUser"
        
        # Store credentials
        echo "RDP_CREDS=User: RDPUser | Password: $password" >> $env:GITHUB_ENV
        
        # Verify user creation
        if (-not (Get-LocalUser -Name "RDPUser" -ErrorAction SilentlyContinue)) {
            Write-Error "User creation failed"
            exit 1
        }

    - name: Install Tailscale
      run: |
        # الروابط الصحيحة لـ Tailscale - تم التصحيح
        $tsurl = "https://pkgs.tailscale.com/stable/tailscale-setup-amd64.msi"
        
        # رابط بديل إذا فشل الأول
        $tsurl_backup = "https://tailscale.com/download/windows"
        
        $tsInstallerPath = "$env:TEMP\tailscale.msi"
        
        # تحميل Tailscale
        Write-Host "Downloading Tailscale from primary URL..."
        try {
            Invoke-WebRequest -Uri $tsurl -OutFile $tsInstallerPath -UserAgent "GitHub-Actions"
        }
        catch {
            Write-Host "Primary URL failed, trying alternative method..."
            # طريقة بديلة باستخدام .exe إذا فشل .msi
            $tsurl_exe = "https://pkgs.tailscale.com/stable/tailscale-setup-amd64.exe"
            $tsInstallerPath = "$env:TEMP\tailscale.exe"
            Invoke-WebRequest -Uri $tsurl_exe -OutFile $tsInstallerPath -UserAgent "GitHub-Actions"
        }
        
        # التحقق من التحميل
        if (-not (Test-Path $tsInstallerPath)) {
            Write-Error "Download failed - file not found"
            exit 1
        }
        
        Write-Host "Download successful! File size: $((Get-Item $tsInstallerPath).Length) bytes"
        
        # التثبيت
        Write-Host "Installing Tailscale..."
        if ($tsInstallerPath -like "*.msi") {
            Start-Process msiexec -ArgumentList "/i", "`"$tsInstallerPath`"", "/quiet", "/norestart" -Wait -NoNewWindow
        } else {
            # إذا كان .exe
            Start-Process -FilePath $tsInstallerPath -ArgumentList "/S" -Wait -NoNewWindow
        }
        
        # الانتظار للتثبيت
        Start-Sleep -Seconds 30
        Write-Host "Tailscale installation completed"

    - name: Verify Tailscale Installation
      run: |
        Write-Host "Verifying Tailscale installation..."
        Start-Sleep -Seconds 10
        
        # التحقق من تثبيت Tailscale بعدة طرق
        $service = Get-Service -Name "Tailscale*" -ErrorAction SilentlyContinue
        $process = Get-Process -Name "tailscale*" -ErrorAction SilentlyContinue
        $exePath = Get-ChildItem "C:\Program Files*\Tailscale*\tailscale.exe" -ErrorAction SilentlyContinue
        
        if ($service -or $process -or $exePath) {
            Write-Host "✓ Tailscale installed successfully"
            if ($service) { Write-Host "  Service: $($service.Name)" }
            if ($process) { Write-Host "  Process: $($process.Name)" }
            if ($exePath) { Write-Host "  Executable: $($exePath.FullName)" }
        } else {
            Write-Error "✗ Tailscale not found after installation"
            exit 1
        }

    - name: Start Tailscale and Get IP
      run: |
        Write-Host "Starting Tailscale connection..."
        
        # إعادة تشغيل الخدمة
        try {
            Restart-Service -Name "Tailscale" -Force -ErrorAction Stop
            Write-Host "✓ Tailscale service restarted"
        }
        catch {
            Write-Host "⚠ Could not restart service, trying to start..."
            Start-Service -Name "Tailscale" -ErrorAction SilentlyContinue
        }
        
        Start-Sleep -Seconds 10
        
        # المصادقة
        Write-Host "Authenticating with Tailscale..."
        & "C:\Program Files\Tailscale\tailscale.exe" up --auth-key=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=windows-server-${{ github.run_id }}
        
        # الحصول على IP
        Write-Host "Getting Tailscale IP..."
        Start-Sleep -Seconds 10
        
        $tailscaleIP = & "C:\Program Files\Tailscale\tailscale.exe" ip --4
        if (-not $tailscaleIP) {
            Write-Host "Trying alternative method to get IP..."
            $status = & "C:\Program Files\Tailscale\tailscale.exe" status --json
            $json = $status | ConvertFrom-Json
            $tailscaleIP = $json.Self.TailscaleIPs[0]
        }
        
        if ($tailscaleIP) {
            echo "TAILSCALE_IP=$tailscaleIP" >> $env:GITHUB_ENV
            Write-Host "✓ Tailscale IP: $tailscaleIP"
        } else {
            Write-Error "✗ Could not get Tailscale IP"
            Write-Host "Current status:"
            & "C:\Program Files\Tailscale\tailscale.exe" status
            exit 1
        }
        
        # عرض النتائج النهائية
        Write-Host "=== DEPLOYMENT COMPLETE ==="
        Write-Host "RDP Credentials: $env:RDP_CREDS"
        Write-Host "Tailscale IP: $tailscaleIP"
        Write-Host "Connect using: mstsc /v:$tailscaleIP"

    - name: Show Connection Info
      run: |
        Write-Host ""
        Write-Host "=== CONNECTION INFORMATION ==="
        Write-Host "RDP Username: RDPUser"
        Write-Host "RDP Password: (check RDP_CREDS in environment)"
        Write-Host "Tailscale IP: $env:TAILSCALE_IP"
        Write-Host "Connect using: mstsc /v:$env:TAILSCALE_IP"
        Write-Host ""
        Write-Host "To get the password, check the 'Create RDP User with Secure Password' step output"
