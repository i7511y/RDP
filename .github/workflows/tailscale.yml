name: Deploy Windows Server with Tailscale

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: windows-latest
    
    steps:
    - name: Enable RDP and configure
      run: |
        # Enable Remote Desktop
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force
        
        # Remove existing rule if any
        netsh advfirewall firewall delete rule name="RDP-Tailscale" 2>$null
        # Add firewall rule for RDP
        netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389
        
        # Restart RDP service
        Restart-Service -Name "TermService" -Force

    - name: Create RDP User with Secure Password
      run: |
        Add-Type -AssemblyName System.Web
        
        $Chars = @{
            Upper = [char[]](65..90)    # A-Z
            Lower = [char[]](97..122)   # a-z
            Number = [char[]](48..57)   # 0-9
            Special = [char[]](33..47) + [char[]](58..64) + [char[]](91..96) + [char[]](123..126)
        }
        
        $tempPassword = @()
        $tempPassword += $Chars.Upper | Get-Random -Count 2
        $tempPassword += $Chars.Lower | Get-Random -Count 2
        $tempPassword += $Chars.Number | Get-Random -Count 2
        $tempPassword += $Chars.Special | Get-Random -Count 2
        
        $password = -join ($tempPassword | Sort-Object { Get-Random })
        $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
        
        # Create user
        New-LocalUser -Name "RDPUser" -Password $securePassword -Description "RDP Access User"
        
        # Add to groups
        Add-LocalGroupMember -Group "Administrators" -Member "RDPUser"
        Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDPUser"
        
        # Store credentials
        echo "RDP_CREDS=User: RDPUser | Password: $password" >> $env:GITHUB_ENV
        
        # Verify user creation
        if (-not (Get-LocalUser -Name "RDPUser" -ErrorAction SilentlyContinue)) {
            Write-Error "User creation failed"
            exit 1
        }

    - name: Install Tailscale
      run: |
        # استخدام رابط مباشر وموثوق
        $tsurl = "https://pkgs.tailscale.com/stable/tailscale-setup-amd64.msi"
        $tsInstallerPath = "$env:TEMP\tailscale.msi"
        
        # تحميل Tailscale مع معالجة الأخطاء
        try {
            Write-Host "Downloading Tailscale from: $tsurl"
            Invoke-WebRequest -Uri $tsurl -OutFile $tsInstallerPath -UserAgent "GitHub-Actions"
            
            # التحقق من أن الملف تم تحميله
            if (Test-Path $tsInstallerPath) {
                Write-Host "Download successful! File size: $((Get-Item $tsInstallerPath).Length) bytes"
            } else {
                Write-Error "Download failed - file not found"
                exit 1
            }
        }
        catch {
            Write-Error "Download failed: $($_.Exception.Message)"
            exit 1
        }
        
        # التثبيت
        Write-Host "Installing Tailscale..."
        Start-Process msiexec -ArgumentList "/i", "`"$tsInstallerPath`"", "/quiet", "/norestart" -Wait -NoNewWindow
        
        # الانتظار للتثبيت
        Start-Sleep -Seconds 30
        Write-Host "Tailscale installation completed"

    - name: Verify Tailscale Installation
      run: |
        # التحقق من تثبيت Tailscale
        Start-Sleep -Seconds 5
        
        # محاولة تشغيل الخدمة
        try {
            Get-Service -Name "Tailscale*" -ErrorAction Stop
            Write-Host "Tailscale service found"
        }
        catch {
            Write-Host "Tailscale service not found, trying to locate executable..."
            # البحث عن Tailscale في المسارات الشائعة
            $tailscaleExe = Get-ChildItem "C:\Program Files*\Tailscale*\tailscale.exe" -ErrorAction SilentlyContinue
            if ($tailscaleExe) {
                Write-Host "Tailscale found at: $($tailscaleExe.FullName)"
            } else {
                Write-Error "Tailscale not installed properly"
                exit 1
            }
        }

    - name: Start Tailscale and Get IP
      run: |
        # تشغيل Tailscale
        Write-Host "Starting Tailscale..."
        
        # إعادة تشغيل الخدمة للتأكد
        Restart-Service -Name "Tailscale" -Force -ErrorAction SilentlyContinue
        Start-Sleep -Seconds 10
        
        # المصادقة
        Write-Host "Authenticating with Tailscale..."
        tailscale up --auth-key=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=windows-server-${{ github.run_id }}
        
        # الحصول على IP
        Write-Host "Getting Tailscale IP..."
        $tailscaleIP = tailscale ip --4
        if (-not $tailscaleIP) {
            Write-Host "Trying alternative method to get IP..."
            $tailscaleIP = tailscale status --json | ConvertFrom-Json | Select-Object -ExpandProperty Self | Select-Object -ExpandProperty TailscaleIPs | Select-Object -First 1
        }
        
        if ($tailscaleIP) {
            echo "TAILSCALE_IP=$tailscaleIP" >> $env:GITHUB_ENV
            Write-Host "Tailscale IP: $tailscaleIP"
        } else {
            Write-Error "Could not get Tailscale IP"
            exit 1
        }
        
        # عرض النتائج
        echo "=== Deployment Complete ==="
        echo "RDP Credentials: $env:RDP_CREDS"
        echo "Tailscale IP: $tailscaleIP"

    - name: Show Connection Info
      run: |
        echo "=== CONNECTION INFORMATION ==="
        echo "RDP Details: $env:RDP_CREDS"
        echo "Tailscale IP: $env:TAILSCALE_IP"
        echo "Connect using: mstsc /v:$env:TAILSCALE_IP"
